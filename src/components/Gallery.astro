---
// En lugar de usar Astro.glob, vamos a simular algunas imágenes de prueba
const imageUrls = [
  'https://picsum.photos/800/600',
  'https://source.unsplash.com/random/800x600',
  'https://placeimg.com/800/600/any',
  'https://loremflickr.com/800/600',
  'https://picsum.photos/800/600?random=1',
  'https://picsum.photos/800/600?random=2', 
  'https://picsum.photos/800/600?random=3',
  'https://picsum.photos/800/600?random=4',
  'https://picsum.photos/800/600?random=5',
  'https://source.unsplash.com/random/800x600?sig=1',
  'https://source.unsplash.com/random/800x600?sig=2',
  'https://source.unsplash.com/random/800x600?sig=3',
  'https://source.unsplash.com/random/800x600?sig=4',
];

// Función para obtener dimensiones aleatorias
function getRandomDimensions() {
  const dimensions = [
    { cols: 'col-span-1', rows: 'row-span-1' },  // Pequeña
    { cols: 'col-span-2', rows: 'row-span-1' },  // Mediana horizontal
    { cols: 'col-span-1', rows: 'row-span-2' },  // Mediana vertical
    { cols: 'col-span-2', rows: 'row-span-2' },  // Grande
    { cols: 'col-span-3', rows: 'row-span-2' },  //   
    { cols: 'col-span-1', rows: 'row-span-3' },  // Grande
    { cols: 'col-span-2', rows: 'row-span-3' },  // Grande
    { cols: 'col-span-3', rows: 'row-span-3' },  // Grande
  ];
  
  // Aseguramos que no se repitan demasiadas imágenes grandes
  const randomIndex = Math.floor(Math.random() * dimensions.length);
  return dimensions[randomIndex];
}

// Mezclar el array de imágenes
const shuffledImages = [...imageUrls].sort(() => Math.random() - 0.5);
---

<div class="min-h-screen w-full bg-white">
  <div class="grid grid-cols-2 md:grid-cols-4 auto-rows-[20vh] gap-3 p-3">
    {
      shuffledImages.map((imageUrl) => {
        const { cols, rows } = getRandomDimensions();
        return (
          <div class={`
            ${cols} ${rows}
            overflow-hidden rounded-lg
            transition-all duration-300 hover:scale-[1.02] hover:z-10
            relative group shadow-sm hover:shadow-xl
            cursor-pointer
          `}
          data-image={imageUrl}
          >
            <img
              src={imageUrl}
              alt="Galería de arte"
              class="w-full h-full object-cover"
              loading="lazy"
            />
            <div class="
              absolute inset-0 bg-white bg-opacity-0 group-hover:bg-opacity-10
              transition-all duration-300
            "/>
          </div>
        );
      })
    }
  </div>
</div>

<!-- Modal para visualización de imagen -->
<div id="imageModal" class="fixed inset-0 bg-black bg-opacity-90 hidden z-50 flex items-center justify-center">
  <div class="relative w-full h-full flex items-center justify-center p-4">
    <button 
      id="closeModalBtn"
      class="absolute top-4 right-4 text-white text-4xl hover:text-gray-300 z-50"
      aria-label="Cerrar modal"
    >
      ×
    </button>
    <img 
      id="modalImage" 
      src="" 
      alt="Imagen ampliada"
      class="max-h-[90vh] max-w-[90vw] object-contain"
    />
  </div>
</div>

<script>
  // Esperar a que el DOM esté completamente cargado
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage') as HTMLImageElement;
    const closeBtn = document.getElementById('closeModalBtn');

    // Agregar listeners a todas las imágenes de la galería
    document.querySelectorAll('[data-image]').forEach(imageDiv => {
      imageDiv.addEventListener('click', () => {
        const imageUrl = imageDiv.getAttribute('data-image');
        if (modal && modalImage && imageUrl) {
          modalImage.src = imageUrl;
          modal.classList.remove('hidden');
          document.body.style.overflow = 'hidden';
        }
      });
    });

    // Cerrar modal con el botón
    closeBtn?.addEventListener('click', () => {
      if (modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = '';
      }
    });

    // Cerrar modal con la tecla Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = '';
        console.log('Cerrando modal con la tecla Escape');
      }
    });

    // Cerrar modal al hacer clic fuera de la imagen
    modal?.addEventListener('click', (e) => {
      // Si el clic fue directamente en el modal (fondo) y no en la imagen
      if (e.target === modal || (e.target as Element).classList.contains('relative')) {
        console.log(e);
        modal.classList.add('hidden');
        document.body.style.overflow = '';
      }
    });
  });
</script>

<style>
  .grid {
    grid-auto-flow: dense;
  }
</style>