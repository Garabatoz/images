---
import { Image } from 'astro:assets';
import image1 from '../assets/images/1.jpg';
import image2 from '../assets/images/2.jpg';
import image3 from '../assets/images/3.jpg';
import image4 from '../assets/images/4.jpg';
import image5 from '../assets/images/5.jpg';
import image6 from '../assets/images/6.jpg';
import image7 from '../assets/images/7.jpg';
import image8 from '../assets/images/8.jpg';
import image9 from '../assets/images/9.jpg';
import image10 from '../assets/images/10.jpg';

const images = [
  { src: image1, ratio: image1.width / image1.height },
  { src: image2, ratio: image2.width / image2.height },
  { src: image3, ratio: image3.width / image3.height },
  { src: image4, ratio: image4.width / image4.height },
  { src: image5, ratio: image5.width / image5.height },
  { src: image6, ratio: image6.width / image6.height },
  { src: image7, ratio: image7.width / image7.height },
  { src: image8, ratio: image8.width / image8.height },
  { src: image9, ratio: image9.width / image9.height },
  { src: image10, ratio: image10.width / image10.height },
];
---

<div class="w-full bg-white">
  <div id="gallery-grid" class="grid grid-cols-2 md:grid-cols-4 auto-rows-[20vh] gap-3 p-3">
    {
      images.map((image, index) => (
        <div
          class="gallery-item overflow-hidden rounded-lg transition-all duration-300 hover:scale-[1.02] hover:z-10 relative group shadow-sm hover:shadow-xl cursor-pointer"
          data-image={image.src.src}
          data-ratio={image.ratio}
          data-index={index}
        >
          <Image
            src={image.src}
            alt="Galería de arte"
            class="w-full h-full object-cover"
            width={image.src.width}
            height={image.src.height}
          />
          <div class="absolute inset-0 bg-white bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-300"/>
        </div>
      ))
    }
  </div>
</div>

<!-- Modal para visualización de imagen -->
<div id="imageModal" class="fixed inset-0 bg-black bg-opacity-90 hidden z-50 flex items-center justify-center">
  <div class="relative w-full h-full flex items-center justify-center p-4">
    <button 
      id="closeModalBtn"
      class="absolute top-4 right-4 text-white text-4xl hover:text-gray-300 z-50"
      aria-label="Cerrar modal"
    >
      ×
    </button>
    <img 
      id="modalImage" 
      src="" 
      alt="Imagen ampliada"
      class="max-h-[90vh] max-w-[90vw] object-contain"
    />
  </div>
</div>

<script>
  // Función para determinar dimensiones basadas en la relación de aspecto
  function getDimensionsFromRatio(ratio: number) {
    // Imágenes horizontales (más anchas que altas)
    if (ratio > 1.5) {
      return { cols: 'col-span-2', rows: 'row-span-1' };  // Panorámica horizontal
    } 
    // Imágenes verticales (más altas que anchas)
    else if (ratio < 0.7) {
      return { cols: 'col-span-1', rows: 'row-span-2' };  // Vertical alargada
    }
    // Imágenes cuadradas o casi cuadradas
    else if (ratio >= 0.9 && ratio <= 1.1) {
      return { cols: 'col-span-1', rows: 'row-span-1' };  // Cuadrada
    }
    // Imágenes muy grandes (opcional, para destacar ciertas imágenes)
    else if (Math.random() > 0.8) { // 20% de probabilidad para imágenes destacadas
      return { cols: 'col-span-2', rows: 'row-span-2' };  // Grande
    }
    // Para el resto de imágenes, asignar tamaño basado en ratio
    else {
      return { cols: 'col-span-1', rows: 'row-span-1' };  // Tamaño predeterminado
    }
  }
  
  // Esperar a que el DOM esté completamente cargado
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage') as HTMLImageElement;
    const closeBtn = document.getElementById('closeModalBtn');
    const galleryGrid = document.getElementById('gallery-grid');
    const galleryItems = document.querySelectorAll('.gallery-item');
    
    // Reorganizar las imágenes aleatoriamente
    const items = Array.from(galleryItems);
    items.sort(() => Math.random() - 0.5);
    
    // Aplicar dimensiones aleatorias basadas en la relación de aspecto
    items.forEach(item => {
      const ratio = parseFloat(item.getAttribute('data-ratio') || "1");
      const { cols, rows } = getDimensionsFromRatio(ratio);
      item.classList.add(cols, rows);
      galleryGrid?.appendChild(item); // Reinserta el elemento en orden aleatorio
    });

    // Agregar listeners a todas las imágenes de la galería
    document.querySelectorAll('[data-image]').forEach(imageDiv => {
      imageDiv.addEventListener('click', () => {
        const imageUrl = imageDiv.getAttribute('data-image');
        if (modal && modalImage && imageUrl) {
          modalImage.src = imageUrl;
          modal.classList.remove('hidden');
          document.body.style.overflow = 'hidden';
        }
      });
    });

    // Cerrar modal con el botón
    closeBtn?.addEventListener('click', () => {
      if (modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = '';
      }
    });

    // Cerrar modal con la tecla Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = '';
      }
    });

    // Cerrar modal al hacer clic fuera de la imagen
    modal?.addEventListener('click', (e) => {
      // Si el clic fue directamente en el modal (fondo) y no en la imagen
      if (e.target === modal || (e.target instanceof Element && e.target.classList.contains('relative'))) {
        modal.classList.add('hidden');
        document.body.style.overflow = '';
      }
    });
  });
</script>

<style>
  .grid {
    grid-auto-flow: dense;
  }
</style>